<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Beckhoff Automation GmbH" productName="TwinCAT PLC Control" productVersion="3.5.13.20" creationDateTime="2020-02-04T14:09:42.6775262" />
  <contentHeader name="PLC" modificationDateTime="2020-02-04T14:09:42.6805253">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="FB_FifoQueue" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ptrArrData">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Queue Data Array</xhtml>
              </documentation>
            </variable>
            <variable name="Length">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Length of Queue</xhtml>
              </documentation>
            </variable>
            <variable name="Ring">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Queue acts as a Ring Buffer (oldest data is overwritten when queue is full)</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <localVars>
            <variable name="_ptrEnqueue">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> pointer to enqueue (head) element</xhtml>
              </documentation>
            </variable>
            <variable name="_ptrDequeue">
              <type>
                <pointer>
                  <baseType>
                    <DWORD />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> pointer to dequeue (tail) element</xhtml>
              </documentation>
            </variable>
            <variable name="_idxEnqueue">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> queue/dequeue indices</xhtml>
              </documentation>
            </variable>
            <variable name="_idxDequeue">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="_count">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> element count</xhtml>
              </documentation>
            </variable>
            <variable name="_full">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> buffer full</xhtml>
              </documentation>
            </variable>
            <variable name="_empty">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> buffer empty</xhtml>
              </documentation>
            </variable>
            <variable name="_sizeof">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> element size</xhtml>
              </documentation>
            </variable>
            <variable name="_init">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> init flag</xhtml>
              </documentation>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Treats supplied array (of any type) as First-in First-out queue.
 Usage: fbFifoQueue(ptrArrData:=ADR(queue_array), Length:=[array length], Ring:=[true/false]);</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT _init THEN
	_init := TRUE;
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Clear" ObjectId="9d558a6c-48bc-4387-a904-2aae02ba153d">
              <interface>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Clears buffer data and resets head/tail pointers. Warning: all data in data array will be reset to 0.
 Usage: fbInstance.Clear();</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MEMSET(ptrArrData, 0, _sizeof * Length);
_count := 0;
_empty := TRUE;
_full := FALSE;
_ptrEnqueue := 0;
_ptrDequeue := 0;
</xhtml>
                </ST>
              </body>
              <InterfaceAsPlainText>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">// Clears buffer data and resets head/tail pointers. Warning: all data in data array will be reset to 0.
// Usage: fbInstance.Clear();
METHOD Clear
VAR_INPUT
END_VAR
</xhtml>
              </InterfaceAsPlainText>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Dequeue" ObjectId="340abd24-2a18-45e0-941a-f5954dd09fce">
              <interface>
                <inputVars>
                  <variable name="pReadData">
                    <type>
                      <pointer>
                        <baseType>
                          <DWORD />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Remove/Retrieve and item from the Queue.
 Usage: fbInstance.Dequeue((ADR(destination));</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// queue has (valid) elements
IF _count &gt; 0 AND _sizeof &gt; 0 THEN
	
	// calculate dequeue pointer
	_ptrDequeue := ptrArrData + TO_DWORD(_sizeof * _idxDequeue);
	
	// copy dequeue pointer to read data
	MEMCPY(pReadData, _ptrDequeue, _sizeof);
	
	// increment pop ptr
	_idxDequeue := (_idxDequeue + 1) MOD Length;
	
	// decrement element count
	_count := _count - 1;
	
	// clear full
	_full := FALSE;
END_IF

// set empty
IF _count = 0 THEN
	_empty := TRUE;
END_IF</xhtml>
                </ST>
              </body>
              <InterfaceAsPlainText>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">// Remove/Retrieve and item from the Queue.
// Usage: fbInstance.Dequeue((ADR(destination));
METHOD Dequeue
VAR_INPUT
	pReadData : POINTER TO DWORD;
END_VAR
</xhtml>
              </InterfaceAsPlainText>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Enqueue" ObjectId="f4d24e47-7862-4855-a4f2-309763f71887">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Val">
                    <type>
                      <derived name="__SYSTEM.AnyType" />
                    </type>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                        <Attributes>
                          <Attribute Name="anytypeclass" Value="ANY" />
                        </Attributes>
                      </data>
                    </addData>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Queued Item</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                    <Attributes>
                      <Attribute Name="hasanytype" />
                    </Attributes>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Add an item to the Queue. Returns true if successful.
 Usage: fbInstance.Enqueue(item);</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// reset empty
_empty := FALSE;

// if first call to enqueue
IF _ptrEnqueue = 0 THEN
	
	// initialize pointers
	_ptrEnqueue := ptrArrData;
	_ptrDequeue := _ptrEnqueue;
	
	// get element size
	_sizeof := TO_UDINT(Val.diSize);
END_IF 

// only overwrite data if in Ring buffer mode
IF (NOT _full) OR (_full AND Ring) THEN
	
	IF (_full AND Ring) THEN
		// increment dequeue ptr
		_idxDequeue := (_idxDequeue + 1) MOD Length;
	END_IF
	
	// calculate enqueue pointer
	_ptrEnqueue := ptrArrData + TO_DWORD(_sizeof * _idxEnqueue);
	
	// load value into buffer
	MEMCPY(_ptrEnqueue, Val.pValue, TO_UDINT(_sizeof));

	// increment enqueue ptr
	_idxEnqueue := (_idxEnqueue + 1) MOD Length;
	
	// increment element count
	IF NOT _full THEN 
		_count := _count + 1; 
	END_IF
	
	Enqueue := TRUE;
ELSE
	Enqueue := FALSE;
END_IF

// buffer full
IF _count = Length THEN
	_full := TRUE;
ELSE
	_full := FALSE;
END_IF</xhtml>
                </ST>
              </body>
              <InterfaceAsPlainText>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">// Add an item to the Queue. Returns true if successful.
// Usage: fbInstance.Enqueue(item);
METHOD Enqueue : BOOL
VAR_INPUT
	Val : ANY;	// Queued Item
END_VAR</xhtml>
              </InterfaceAsPlainText>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Sort" ObjectId="0f9e115a-8d90-4973-9470-b5451226bf7b">
              <interface>
                <localVars>
                  <variable name="_arrTemp">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="_elemTemp">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="_countTemp">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="i">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sorts FIFO elements in data array by entry order.
 Usage: fbInstance.Sort();</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// data can be sorted
IF Length &lt; 1 OR _count &lt; 1 OR _sizeof &lt; 1 THEN
	RETURN;
END_IF

// allocate memory for temporary copies
_arrTemp := __NEW(BYTE, (_sizeof * _count));
_elemTemp := __NEW(BYTE, _sizeof);

// get count
_countTemp := _count;

// copy to temp memory via Dequeue method (maintains queue order)
FOR i := 0 TO _countTemp - 1 DO
	THIS^.Dequeue(ADR(_elemTemp[0]));
	MEMCPY(ADR(_arrTemp[i * _sizeof]), ADR(_elemTemp[0]), _sizeof);
END_FOR

// clear queue data
THIS^.Clear();

// copy temp data back into queue
MEMCPY(ptrArrData, ADR(_arrTemp[0]), (_sizeof * _countTemp));

// reset count
_count := _countTemp;

// reset enqueue/dequeue pointers
_idxEnqueue := _countTemp MOD Length;
_idxDequeue := 0;

// reset empty/full
_empty := FALSE;
IF _count = Length THEN
	_full := TRUE;
END_IF

// free memory
__DELETE(_arrTemp);
__DELETE(_elemTemp);</xhtml>
                </ST>
              </body>
              <InterfaceAsPlainText>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">// Sorts FIFO elements in data array by entry order.
// Usage: fbInstance.Sort();
METHOD Sort
VAR
	_arrTemp : POINTER TO BYTE;
	_elemTemp : POINTER TO BYTE;
	_countTemp : UDINT;
	i : UDINT;
END_VAR
</xhtml>
              </InterfaceAsPlainText>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="Count" ObjectId="5e5253ac-9373-4d5d-9274-33157f760d6c">
              <interface>
                <returnType>
                  <DINT />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">Count := _count;</xhtml>
                  </ST>
                </body>
                <InterfaceAsPlainText>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                </InterfaceAsPlainText>
                <addData />
              </GetAccessor>
              <InterfaceAsPlainText>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">PROPERTY Count : DINT</xhtml>
              </InterfaceAsPlainText>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="IsEmpty" ObjectId="7b47624c-a63c-45bb-9386-d6c8c611e0d0">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">IsEmpty := _empty;</xhtml>
                  </ST>
                </body>
                <InterfaceAsPlainText>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                </InterfaceAsPlainText>
                <addData />
              </GetAccessor>
              <InterfaceAsPlainText>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">PROPERTY IsEmpty : BOOL</xhtml>
              </InterfaceAsPlainText>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
            <Property name="IsFull" ObjectId="026de543-9a0d-497d-a2c4-b2f5d12a8d52">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <GetAccessor>
                <interface />
                <body>
                  <ST>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">IsFull := _full;</xhtml>
                  </ST>
                </body>
                <InterfaceAsPlainText>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">VAR
END_VAR
</xhtml>
                </InterfaceAsPlainText>
                <addData />
              </GetAccessor>
              <InterfaceAsPlainText>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">PROPERTY IsFull : BOOL</xhtml>
              </InterfaceAsPlainText>
              <addData />
            </Property>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/interfaceasplaintext" handleUnknown="implementation">
            <InterfaceAsPlainText>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">// Treats supplied array (of any type) as First-in First-out queue.
// Usage: fbFifoQueue(ptrArrData:=ADR(queue_array), Length:=[array length], Ring:=[true/false]);
FUNCTION_BLOCK FB_FifoQueue
VAR_INPUT
	ptrArrData 	: POINTER TO DWORD; // Queue Data Array
	Length 		: UDINT;				// Length of Queue
	Ring		: BOOL;				// Queue acts as a Ring Buffer (oldest data is overwritten when queue is full)
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// pointer to enqueue (head) element
	_ptrEnqueue 	: POINTER TO DWORD;
	// pointer to dequeue (tail) element
	_ptrDequeue	: POINTER TO DWORD;
	
	// queue/dequeue indices
	_idxEnqueue	: UDINT;
	_idxDequeue	: UDINT;
	
	// element count
	_count 		: UDINT;
	// buffer full
	_full 		: BOOL := FALSE;
	// buffer empty
	_empty 		: BOOL := TRUE;
	// element size
	_sizeof : UDINT;
	// init flag
	_init : BOOL := FALSE;
END_VAR
</xhtml>
            </InterfaceAsPlainText>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2f6f0535-fa4a-4cdc-ae06-acdbbea1d87d</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="FB_FifoQueue" ObjectId="2f6f0535-fa4a-4cdc-ae06-acdbbea1d87d">
          <Object Name="Clear" ObjectId="9d558a6c-48bc-4387-a904-2aae02ba153d" />
          <Object Name="Count" ObjectId="5e5253ac-9373-4d5d-9274-33157f760d6c" />
          <Object Name="Dequeue" ObjectId="340abd24-2a18-45e0-941a-f5954dd09fce" />
          <Object Name="Enqueue" ObjectId="f4d24e47-7862-4855-a4f2-309763f71887" />
          <Object Name="IsEmpty" ObjectId="7b47624c-a63c-45bb-9386-d6c8c611e0d0" />
          <Object Name="IsFull" ObjectId="026de543-9a0d-497d-a2c4-b2f5d12a8d52" />
          <Object Name="Sort" ObjectId="0f9e115a-8d90-4973-9470-b5451226bf7b" />
        </Object>
      </ProjectStructure>
    </data>
  </addData>
</project>